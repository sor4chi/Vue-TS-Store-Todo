(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-83e78e1a"],{"2c1d":function(e,t,a){"use strict";a.r(t);var s=a("7a23"),o={class:"commentary"},c=Object(s["f"])('<h1 data-v-97292c2e>Commentary</h1><h2 data-v-97292c2e>構成</h2><div class="compose_list" data-v-97292c2e><a href="https://cli.vuejs.org/" data-v-97292c2e>VueCLI</a><a href="https://jp.vuejs.org/v2/guide/typescript.html" data-v-97292c2e>Typescript</a><a href="https://vuex.vuejs.org/ja/" data-v-97292c2e>VueX</a><a href="https://vue-loader-v14.vuejs.org/ja/configurations/pre-processors.html" data-v-97292c2e>scss</a><a href="https://github.com/vuejs/eslint-plugin-vue" data-v-97292c2e>eslint</a><a href="https://github.com/meteorlxy/eslint-plugin-prettier-vue" data-v-97292c2e>prittier</a></div><h2 data-v-97292c2e>説明</h2><h3 data-v-97292c2e>Todo</h3><p data-v-97292c2e> ToDoのデータをStoreに保持させてみました。（当然VueXのStoreは一度リロードすると消えますが） Form.vue（コンポーネント内）からemitを使わずにToDoを追加/削除(Stateを変更)しています。 Typescriptでは、Storeで型定義が必要になるので```types/index.d.ts```内でTodo型を自作/定義してます。 </p><h3 data-v-97292c2e>PersistedTodo</h3><p data-v-97292c2e> 基本的な構造はTodoのStoreと同じですが、VueXのプラグインvuex-persistedstateを使ってデータを永続化しています。 （今回はSessionStorageを使用しているので、セッションが切れたらorタブやブラウザを閉じたらリセットされます） </p><h3 data-v-97292c2e>Storeについて</h3><p data-v-97292c2e> 今回はStoreの機能のうち、state(初期データ）、mutations(Stateの変更メソッド)、plugins(vuex-persistedstate)を使用しています。 そのほかにもaction(Stateの変更メソッド（非同期処理も可能、基本それ以外はmutationに書く）)、getters(算出用の（Store内で使う）メソッド)があります。 </p>',10),r=[c];function d(e,t,a,c,d,i){return Object(s["q"])(),Object(s["d"])("div",o,r)}var i=a("5c40"),p=Object(i["m"])({}),v=(a("bf31"),a("6b0d")),u=a.n(v);const n=u()(p,[["render",d],["__scopeId","data-v-97292c2e"]]);t["default"]=n},bf31:function(e,t,a){"use strict";a("c490")},c490:function(e,t,a){}}]);
//# sourceMappingURL=chunk-83e78e1a.4d927b3b.js.map